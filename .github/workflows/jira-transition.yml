name: Jira Transition

on:
  repository_dispatch:
    types: [jira-transition]
  workflow_dispatch:
    inputs:
      issue_key:
        description: "Clave del ticket de Jira"
        required: true
      branch_name:
        description: "Rama asociada al ticket"
        required: true

jobs:
  jira-transition-job:
    runs-on: self-hosted
    permissions:
      contents: write   # necesario para checkout

    steps:
      - name: Determinar branch e issue
        id: vars
        run: |
          if [ -n "${{ github.event.client_payload.branch_name }}" ]; then
            echo "branch=${{ github.event.client_payload.branch_name }}" >> $GITHUB_OUTPUT
            echo "issue=${{ github.event.client_payload.issue_key }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.event.inputs.branch_name }}" >> $GITHUB_OUTPUT
            echo "issue=${{ github.event.inputs.issue_key }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout cÃ³digo en la rama del ticket
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.vars.outputs.branch }}

      - name: Login en Vault
        shell: bash
        env:
          VAULT_ADDR: http://127.0.0.1:8200
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
          VAULT_SKIP_VERIFY: "true"
          PATH: ${{ env.PATH }}:/home/gha-runner/vault
        run: |
          set -Eeuo pipefail
          vault --version
          vault login "$VAULT_TOKEN" >/dev/null
          vault token lookup

      - name: Obtener token de GitHub desde Vault (solo bash)
        id: get-creds
        shell: bash
        env:
          VAULT_ADDR: http://127.0.0.1:8200
          VAULT_SKIP_VERIFY: "true"
          PATH: ${{ env.PATH }}:/home/gha-runner/vault
        run: |
          set -Eeuo pipefail
      
          # Leer token desde Vault y limpiar saltos de lÃ­nea / retornos de carro
          GH_TOKEN=$(vault kv get -field=GH_TOKEN secret/github)
          GH_TOKEN="${GH_TOKEN//$'\n'/}"   # eliminar saltos de lÃ­nea
          GH_TOKEN="${GH_TOKEN//$'\r'/}"   # eliminar retornos de carro
      
          # Guardar en entorno de GitHub Actions
          echo "GH_TOKEN=$GH_TOKEN" >> "$GITHUB_ENV"
      
          # Mostrar token visible en logs
          echo "ðŸ”‘ Token GitHub obtenido: $GH_TOKEN"
      


      - name: Mostrar payload recibido
        run: |
          echo "ðŸ”‘ Issue Key: ${{ steps.vars.outputs.issue }}"
          echo "ðŸŒ¿ Branch:   ${{ steps.vars.outputs.branch }}"

      - name: Lanzar workflow main.yml con cURL
        shell: bash
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
          ISSUE_KEY: ${{ steps.vars.outputs.issue }}
          BRANCH_NAME: ${{ steps.vars.outputs.branch }}
        run: |
          echo "ðŸš€ Disparando workflow main.yml en la rama $BRANCH_NAME para el issue $ISSUE_KEY ..."
          curl -i -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/ricardops2211/databricks-lab/actions/workflows/main.yml/dispatches \
            -d "{
                  \"ref\": \"$BRANCH_NAME\",
                  \"inputs\": {
                    \"issue_key\": \"$ISSUE_KEY\",
                    \"branch_name\": \"$BRANCH_NAME\"
                  }
                }"
